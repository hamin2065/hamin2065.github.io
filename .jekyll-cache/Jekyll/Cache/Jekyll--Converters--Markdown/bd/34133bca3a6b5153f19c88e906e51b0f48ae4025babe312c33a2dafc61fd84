I"‘w<h2 id="introduction">Introduction</h2>

<p>Weâ€™ll work on a binary file called â€˜serialâ€™. And since binary analysis is not so super fun for everybody ðŸ¤–.
I decided to add some challenge and selected this special binary from a ctf (capture the flag) challenge.</p>

<p>So Serial is a reverse engineering ctf challenge from SHARIF UNIVERSITY CTF 2016 worth 150 pts.
The goal of this challenge is to find the right serial number which will be the flag.</p>

<p>Like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./serial s0m3th!ng
<span class="o">&gt;&gt;</span> Yeah you found the flag!
</code></pre></div></div>

<p>And in this example <em>s0m3th!ng</em> would be the flag. 
You donâ€™t know it in advance so youâ€™ll have to find it.</p>

<h3 id="write-up-sources">Write-up Sources</h3>

<p>I chose this one because it had a lot of write ups including one with angr,
So it would be a good choice to practice with radare2 and angr with a chance of succeeding
while being a total beginner.</p>

<ul>
  <li><a href="https://github.com/xil-se/xil.se/blob/cbeb4ecc509b0590a7c246096a45e132fe8ce32e/content/post/sharifctf-2016-re6-serial.md">xil.se</a></li>
  <li><a href="http://grazfather.github.io/ctf/re/2016/02/07/Sharif-CTF-RE150-Serial-Writeup.html">grazfather</a></li>
  <li><a href="https://0x90r00t.com/2016/02/07/sharif-university-ctf-2016-reverse-150-serial-write-up/">0x90r00t</a></li>
  <li><a href="https://bannsecurity.com/index.php/home/10-ctf-writeups/29-sharif-university-ctf-2016-serial">Michael Bann</a></li>
  <li><a href="https://www.aldeid.com/wiki/SharifCTF-2016/serial">Aldeid</a></li>
</ul>

<h2 id="reverse-engineering">Reverse engineering</h2>

<p>I will be using file, strings, binwalk, radare2 and angr for the binary analysis and reverse engineering.</p>

<h3 id="references">References</h3>

<p>Whenever you see something <code class="language-plaintext highlighter-rouge">0x45</code> itâ€™s an hexadecimal representation of a byte.
Here are the common registers in memory:</p>

<table>
  <thead>
    <tr>
      <th>8-byte register</th>
      <th>Bytes 0-3</th>
      <th>Bytes 0-1</th>
      <th>Byte 0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>rax</td>
      <td>eax</td>
      <td>ax</td>
      <td>al</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>When thereâ€™s a <code class="language-plaintext highlighter-rouge">r</code> it is a register so 8 bytes, when it is a <code class="language-plaintext highlighter-rouge">e</code> it is bytes 0 to 3.</p>
</blockquote>

<p>Commands in assembly:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">lea &lt;destination&gt; &lt;source&gt;</code> : load source adress into destination</li>
  <li><code class="language-plaintext highlighter-rouge">mov &lt;destination&gt; &lt;source&gt;</code> : Move source address into destination</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    mov     bx, 0C3EEh  <span class="p">;</span> Sign bit of bl is now 1: BH <span class="o">==</span> 1100 0011, BL <span class="o">==</span> 1110 1110
    movsx   ebx, bx     <span class="p">;</span> Load signed 16-bit value into 32-bit register and sign-extend
                        <span class="p">;</span> EBX is now equal FFFFC3EEh
    movzx   dx, bl      <span class="p">;</span> Load unsigned 8-bit value into 16-bit register and zero-extend
                        <span class="p">;</span> DX is now equal 00EEh
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cmp &lt;value1&gt; &lt;value2&gt;</code> : Compare source value1 with value2</li>
  <li><code class="language-plaintext highlighter-rouge">je &lt;address&gt;</code> : Jump to the specified address if the above comparison is equal</li>
  <li><code class="language-plaintext highlighter-rouge">add &lt;destination&gt; &lt;value&gt;</code> : Add the value at the destination address value.</li>
</ul>

<p>Common assembly registers:</p>

<ul>
  <li>rax - register a extended (for data)</li>
  <li>rdi - register destination index (destination for data copies)</li>
</ul>

<p>Ascii tables with hexadecimal and char values:</p>

<ul>
  <li><a href="http://lwp.interglacial.com/appf_01.htm">ASCII Table</a></li>
</ul>

<h3 id="pre-analysis">Pre Analysis</h3>

<p>First we are going to explore a bit into this binary with our simple tools in case the flag is easy to get:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>file serial
<span class="o">&gt;&gt;</span> serial: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="k">for </span>GNU/Linux 2.6.26, BuildID[sha1]<span class="o">=</span>77e92e8b1bd4f26641bab4dbf563037a7b9538d2, not stripped
</code></pre></div></div>

<p>So we can see the type of file, and that itâ€™s actually an executable, then we can check for strings in it.
We donâ€™t see any <em>flag</em> or <em>{s0m3th!ng}</em> that would be the flag only</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strings <span class="nt">-o</span> serial | <span class="nb">grep</span> <span class="s1">'valid'</span>
   3500 Please Enter the valid key!
   3529 Serial number is valid :<span class="o">)</span>
   3556 Serial number is not valid!
</code></pre></div></div>

<p>Use binwalks to scan the file for a specific sequence of bytes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>binwalk <span class="nt">-R</span> serial
</code></pre></div></div>

<p>Unfortunately the <em>flag</em> canâ€™t be found that easily.
We will need to do some analysis â€¦</p>

<h3 id="analysis-with-radare2">Analysis with radare2</h3>

<p>First we need to analyse with <code class="language-plaintext highlighter-rouge">aaa</code> with radare2.</p>

<h4 id="overview-of-the-binary">Overview of the binary</h4>

<p>That the time where we look at the disassembled main to understand what is happening.
Radare2 is very good at deciphering through the assembly instructions, 
We can view the disassembled view with <code class="language-plaintext highlighter-rouge">pdf @ main</code></p>

<p>We can deduce that the variable s <code class="language-plaintext highlighter-rouge">rbp-0x200</code> is the entered input here. 
Shortly after that we can see that its length is checked <code class="language-plaintext highlighter-rouge">strlen</code>, the serial number should be 16 <code class="language-plaintext highlighter-rouge">0x10</code>.</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">|</span>           <span class="mh">0x00400a19</span>      <span class="mi">488</span><span class="n">d8500feff</span><span class="o">.</span>  <span class="n">lea</span> <span class="n">rax</span><span class="o">,</span> <span class="o">[</span><span class="n">s</span><span class="o">]</span>                <span class="o">;</span> <span class="n">load</span> <span class="n">rax</span> <span class="n">with</span> <span class="n">the</span> <span class="n">value</span> <span class="n">of</span> <span class="n">s</span>
<span class="o">|</span>           <span class="mh">0x00400a20</span>      <span class="mi">4889</span><span class="n">c7</span>         <span class="n">mov</span> <span class="n">rdi</span><span class="o">,</span> <span class="n">rax</span>                <span class="o">;</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span>
<span class="o">|</span>           <span class="mh">0x00400a23</span>      <span class="n">e828feffff</span>     <span class="n">call</span> <span class="n">sym</span><span class="o">.</span><span class="na">imp</span><span class="o">.</span><span class="na">strlen</span>         <span class="o">;</span> <span class="n">size_t</span> <span class="n">strlen</span><span class="o">(</span><span class="kd">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="o">)</span>
<span class="o">|</span>           <span class="mh">0x00400a28</span>      <span class="mi">4883</span><span class="n">f810</span>       <span class="n">cmp</span> <span class="n">rax</span><span class="o">,</span> <span class="mh">0x10</span>               <span class="o">;</span> <span class="n">compare</span> <span class="n">with</span> <span class="mi">16</span>
<span class="o">|</span>       <span class="o">,=&lt;</span> <span class="mh">0x00400a2c</span>      <span class="mi">740</span><span class="n">e</span>           <span class="n">je</span> <span class="mh">0x400a3c</span>                 <span class="o">;</span> <span class="n">jump</span> <span class="n">when</span> <span class="n">equal</span> <span class="n">to</span> <span class="mh">0x400a3c</span> 
</code></pre></div></div>

<h4 id="finding-some-constraints">Finding some constraints</h4>

<p>Then we can see that the first byte <code class="language-plaintext highlighter-rouge">al</code> of the input is compared with <code class="language-plaintext highlighter-rouge">E</code> (1 ASCII character is 8bits -&gt; 1 byte).</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">|</span>       <span class="err">`</span><span class="o">-&gt;</span> <span class="mh">0x00400a3c</span>      <span class="mi">0</span><span class="n">fb68500feff</span><span class="o">.</span>  <span class="n">movzx</span> <span class="n">eax</span><span class="o">,</span> <span class="kt">byte</span> <span class="o">[</span><span class="n">s</span><span class="o">]</span>         <span class="o">;</span> <span class="n">Move</span> <span class="n">the</span> <span class="mi">4</span> <span class="n">bytes</span> <span class="k">in</span> <span class="n">memory</span> <span class="k">in</span> <span class="o">[</span><span class="n">s</span><span class="o">]</span> <span class="n">into</span> <span class="n">EAX</span>
<span class="o">|</span>           <span class="mh">0x00400a43</span>      <span class="mi">3</span><span class="n">c45</span>           <span class="n">cmp</span> <span class="n">al</span><span class="o">,</span> <span class="mh">0x45</span>                <span class="o">;</span> <span class="n">compare</span> <span class="n">the</span> <span class="n">first</span> <span class="kt">byte</span> <span class="n">with</span> <span class="s1">'E'</span> <span class="o">;</span> <span class="mi">69</span>
<span class="o">|</span>       <span class="o">,=&lt;</span> <span class="mh">0x00400a45</span>      <span class="mi">740</span><span class="n">e</span>           <span class="n">je</span> <span class="mh">0x400a55</span>                 <span class="o">;</span> <span class="n">jump</span> <span class="n">when</span> <span class="n">equal</span> <span class="n">to</span> <span class="mh">0x400a55</span>
</code></pre></div></div>

<p>Then a hard coded value <code class="language-plaintext highlighter-rouge">var_1f1h</code> at <code class="language-plaintext highlighter-rouge">rbp-0x1f1</code> is added and the result is compared with the three first bytes of the input. 
So we can skip and try to find all of the easy constraints we can find. 
There are <code class="language-plaintext highlighter-rouge">16</code> hard coded values, so I guess each one is used to validate each character of the serial number.
Since the addition of the bytes for <code class="language-plaintext highlighter-rouge">E</code> and <code class="language-plaintext highlighter-rouge">var_1f1h</code> equals <code class="language-plaintext highlighter-rouge">155</code>, in ASCII that would mean <code class="language-plaintext highlighter-rouge">var_1f1h</code> equals <code class="language-plaintext highlighter-rouge">V</code> because <code class="language-plaintext highlighter-rouge">86 =155 - 69</code></p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">|</span>       <span class="err">`</span><span class="o">-&gt;</span> <span class="mh">0x00400a55</span>      <span class="mi">0</span><span class="n">fb68500feff</span><span class="o">.</span>  <span class="n">movzx</span> <span class="n">eax</span><span class="o">,</span> <span class="kt">byte</span> <span class="o">[</span><span class="n">s</span><span class="o">]</span>         <span class="o">;</span> <span class="n">Same</span> <span class="k">as</span> <span class="n">before</span>
<span class="o">|</span>           <span class="mh">0x00400a5c</span>      <span class="mi">0</span><span class="n">fbed0</span>         <span class="n">movsx</span> <span class="n">edx</span><span class="o">,</span> <span class="n">al</span>               <span class="o">;</span> <span class="n">Move</span> <span class="n">al</span> <span class="n">to</span> <span class="n">edx</span> 
<span class="o">|</span>           <span class="mh">0x00400a5f</span>      <span class="mi">0</span><span class="n">fb6850ffeff</span><span class="o">.</span>  <span class="n">movzx</span> <span class="n">eax</span><span class="o">,</span> <span class="kt">byte</span> <span class="o">[</span><span class="n">var_1f1h</span><span class="o">]</span>  <span class="o">;</span> <span class="n">Move</span> <span class="n">variable</span> <span class="o">[</span><span class="n">var_1f1h</span><span class="o">]</span> <span class="n">to</span> <span class="n">eax</span>
<span class="o">|</span>           <span class="mh">0x00400a66</span>      <span class="mi">0</span><span class="n">fbec0</span>         <span class="n">movsx</span> <span class="n">eax</span><span class="o">,</span> <span class="n">al</span>               <span class="o">;</span> <span class="n">Move</span> <span class="n">al</span> <span class="n">to</span> <span class="n">eax</span>
<span class="o">|</span>           <span class="mh">0x00400a69</span>      <span class="mi">01</span><span class="n">d0</span>           <span class="n">add</span> <span class="n">eax</span><span class="o">,</span> <span class="n">edx</span>                <span class="o">;</span> <span class="n">Add</span> <span class="n">edx</span> <span class="n">to</span> <span class="n">eax</span>
<span class="o">|</span>           <span class="mh">0x00400a6b</span>      <span class="mi">3</span><span class="n">d9b000000</span>     <span class="n">cmp</span> <span class="n">eax</span><span class="o">,</span> <span class="mh">0x9b</span>               <span class="o">;</span> <span class="n">compare</span> <span class="n">eax</span> <span class="n">with</span> <span class="mi">155</span>
<span class="o">|</span>           <span class="mh">0x00400a70</span>      <span class="mi">740</span><span class="n">e</span>           <span class="n">je</span> <span class="mh">0x400a80</span>
</code></pre></div></div>

<p>Then we can see that the xth byte (hard coded value <code class="language-plaintext highlighter-rouge">[var_1ffh]</code>) should be a <code class="language-plaintext highlighter-rouge">Z</code></p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">|</span>           <span class="mh">0x00400a7b</span>      <span class="n">e9fb010000</span>     <span class="n">jmp</span> <span class="mh">0x400c7b</span>
<span class="o">|</span>           <span class="mh">0x00400a80</span>      <span class="mi">0</span><span class="n">fb68501feff</span><span class="o">.</span>  <span class="n">movzx</span> <span class="n">eax</span><span class="o">,</span> <span class="kt">byte</span> <span class="o">[</span><span class="n">var_1ffh</span><span class="o">]</span>
<span class="o">|</span>           <span class="mh">0x00400a87</span>      <span class="mi">3</span><span class="n">c5a</span>           <span class="n">cmp</span> <span class="n">al</span><span class="o">,</span> <span class="mh">0x5a</span>                <span class="o">;</span> <span class="s1">'Z'</span> <span class="o">;</span> <span class="mi">90</span>
<span class="o">|</span>       <span class="o">,=&lt;</span> <span class="mh">0x00400a89</span>      <span class="mi">740</span><span class="n">e</span>           <span class="n">je</span> <span class="mh">0x400a99</span>
</code></pre></div></div>

<p>Then there is another comparison with a hard coded value <code class="language-plaintext highlighter-rouge">[var_1f2h]</code>. So we have 90 + <code class="language-plaintext highlighter-rouge">?</code> = 155, so <code class="language-plaintext highlighter-rouge">A</code> at <code class="language-plaintext highlighter-rouge">0x65</code>.</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">|</span>       <span class="err">`</span><span class="o">-&gt;</span> <span class="mh">0x00400a99</span>      <span class="mi">0</span><span class="n">fb68501feff</span><span class="o">.</span>  <span class="n">movzx</span> <span class="n">eax</span><span class="o">,</span> <span class="kt">byte</span> <span class="o">[</span><span class="n">var_1ffh</span><span class="o">]</span>  <span class="o">;</span> <span class="n">Still</span> <span class="n">contains</span> <span class="n">Z</span>
<span class="o">|</span>           <span class="mh">0x00400aa0</span>      <span class="mi">0</span><span class="n">fbed0</span>         <span class="n">movsx</span> <span class="n">edx</span><span class="o">,</span> <span class="n">al</span>               <span class="o">;</span> <span class="s1">'Z'</span> <span class="o">;</span> <span class="mi">90</span>
<span class="o">|</span>           <span class="mh">0x00400aa3</span>      <span class="mi">0</span><span class="n">fb6850efeff</span><span class="o">.</span>  <span class="n">movzx</span> <span class="n">eax</span><span class="o">,</span> <span class="kt">byte</span> <span class="o">[</span><span class="n">var_1f2h</span><span class="o">]</span>  <span class="o">;</span> <span class="n">Unknown</span> <span class="n">hard</span> <span class="n">coded</span> <span class="n">value</span>
<span class="o">|</span>           <span class="mh">0x00400aaa</span>      <span class="mi">0</span><span class="n">fbec0</span>         <span class="n">movsx</span> <span class="n">eax</span><span class="o">,</span> <span class="n">al</span>               <span class="o">;</span> <span class="n">first</span> <span class="kt">byte</span> <span class="n">of</span> <span class="n">that</span> <span class="n">value</span>
<span class="o">|</span>           <span class="mh">0x00400aad</span>      <span class="mi">01</span><span class="n">d0</span>           <span class="n">add</span> <span class="n">eax</span><span class="o">,</span> <span class="n">edx</span>                <span class="o">;</span> <span class="mi">90</span> <span class="o">+</span> <span class="n">Unknown</span>
<span class="o">|</span>           <span class="mh">0x00400aaf</span>      <span class="mi">3</span><span class="n">d9b000000</span>     <span class="n">cmp</span> <span class="n">eax</span><span class="o">,</span> <span class="mh">0x9b</span>               <span class="o">;</span> <span class="mi">155</span>
</code></pre></div></div>

<p>Then it checks that the xth byte (hard coded value <code class="language-plaintext highlighter-rouge">[var_1feh]</code>) is a <code class="language-plaintext highlighter-rouge">9</code></p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">|</span>           <span class="mh">0x00400ac4</span>      <span class="mi">0</span><span class="n">fb68502feff</span><span class="o">.</span>  <span class="n">movzx</span> <span class="n">eax</span><span class="o">,</span> <span class="kt">byte</span> <span class="o">[</span><span class="n">var_1feh</span><span class="o">]</span>
<span class="o">|</span>           <span class="mh">0x00400acb</span>      <span class="mi">3</span><span class="n">c39</span>           <span class="n">cmp</span> <span class="n">al</span><span class="o">,</span> <span class="mh">0x39</span>                <span class="o">;</span> <span class="s1">'9'</span> <span class="o">;</span> <span class="mi">57</span>
<span class="o">|</span>       <span class="o">,=&lt;</span> <span class="mh">0x00400acd</span>      <span class="mi">740</span><span class="n">e</span>           <span class="n">je</span> <span class="mh">0x400add</span>
</code></pre></div></div>

<h4 id="manually-finding-the-serial-number">Manually finding the serial number</h4>

<p>So we can go on till the end we would find:</p>
<ul>
  <li>A comparison between <code class="language-plaintext highlighter-rouge">155</code> and the addition of some hardcoded variable and the previous letter.</li>
  <li>A direct comparison between the next byte and a letter.</li>
</ul>

<p>To sum up we should have these constraints:</p>
<ul>
  <li>The length of the input must be 16</li>
  <li>str[0] = E</li>
  <li>str[15] = V</li>
  <li>str[1] = Z</li>
  <li>str[14] = A</li>
  <li>str[2] = 9</li>
  <li>â€¦</li>
  <li>str[7] = c</li>
  <li>str[8] = 8</li>
</ul>

<p>Which leads to the end at <code class="language-plaintext highlighter-rouge">EZ9dmq4c8g9G7bAV</code>.
However it takes a lot of time and efforts.
In fact, angr does not always need a very advance investigation of the binary.</p>

<h3 id="angr">Angr</h3>

<h4 id="install-angr">Install angr</h4>

<p>For that itâ€™s better to use a virtual environment:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> venv <span class="nb">env
source env</span>/bin/activate
python3 <span class="nt">-m</span> pip <span class="nb">install </span>angr
</code></pre></div></div>

<p>Then you can get started, if you have any issue you can follow the <a href="https://docs.angr.io/introductory-errata/install">documentation</a>.</p>

<h4 id="what-you-need-to-know">What you need to know</h4>

<p>With angr, what we want to achieve is arriving at the state where the serial number input is valid.
So in radare2 we can do <code class="language-plaintext highlighter-rouge">iz</code> which will give us the strings and their data location,
this is more precise than <code class="language-plaintext highlighter-rouge">strings</code> or <code class="language-plaintext highlighter-rouge">binwalk</code>:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span><span class="mh">0x00400890</span><span class="o">]&gt;</span> <span class="n">iz</span>
<span class="o">[</span><span class="n">Strings</span><span class="o">]</span>
<span class="n">Num</span> <span class="n">Paddr</span>      <span class="n">Vaddr</span>      <span class="n">Len</span> <span class="n">Size</span> <span class="n">Section</span>  <span class="n">Type</span>  <span class="n">String</span>
<span class="mi">000</span> <span class="mh">0x00000dac</span> <span class="mh">0x00400dac</span>  <span class="mi">28</span>  <span class="nf">29</span> <span class="o">(.</span><span class="na">rodata</span><span class="o">)</span> <span class="n">ascii</span> <span class="n">Please</span> <span class="n">Enter</span> <span class="n">the</span> <span class="n">valid</span> <span class="n">key</span><span class="o">!</span><span class="err">\</span><span class="n">n</span>
<span class="mi">001</span> <span class="mh">0x00000dc9</span> <span class="mh">0x00400dc9</span>  <span class="mi">26</span>  <span class="nf">27</span> <span class="o">(.</span><span class="na">rodata</span><span class="o">)</span> <span class="n">ascii</span> <span class="n">Serial</span> <span class="n">number</span> <span class="n">is</span> <span class="n">valid</span> <span class="o">:)</span><span class="err">\</span><span class="n">n</span>
<span class="mi">002</span> <span class="mh">0x00000de4</span> <span class="mh">0x00400de4</span>  <span class="mi">28</span>  <span class="nf">29</span> <span class="o">(.</span><span class="na">rodata</span><span class="o">)</span> <span class="n">ascii</span> <span class="n">Serial</span> <span class="n">number</span> <span class="n">is</span> <span class="n">not</span> <span class="n">valid</span><span class="o">!</span><span class="err">\</span><span class="n">n</span>
</code></pre></div></div>

<p>Then we can find where we use this data in the binary.
Here we want to explore the binary until we arrive at <code class="language-plaintext highlighter-rouge">Serial number is valid :)\n</code> which is at the instruction line <code class="language-plaintext highlighter-rouge">0x00400c5c</code> (different from the data address).</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">|</span>      <span class="err">`</span><span class="o">--&gt;</span> <span class="mh">0x00400c5c</span>      <span class="n">bec90d4000</span>     <span class="n">mov</span> <span class="n">esi</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="na">Serial_number_is_valid_</span><span class="o">:</span> <span class="o">;</span> <span class="mh">0x400dc9</span> <span class="o">;</span> <span class="s2">"Serial number is valid :)\n"</span>
<span class="o">|</span>           <span class="mh">0x00400c61</span>      <span class="n">bfe0136000</span>     <span class="n">mov</span> <span class="n">edi</span><span class="o">,</span> <span class="n">obj</span><span class="o">.</span><span class="na">std</span><span class="o">::</span><span class="n">cout</span>      <span class="o">;</span> <span class="mh">0x6013e0</span>
</code></pre></div></div>

<p>Weâ€™ve seen earlier that it starts checking the password constraints at <code class="language-plaintext highlighter-rouge">0x00400a3c</code> so thatâ€™s from where weâ€™re going to 
ask angr to look for the password that should be stored in <code class="language-plaintext highlighter-rouge">rbp-0x200</code> and have a size of 16.</p>

<h4 id="get-started-with-angr">Get started with Angr</h4>

<p>With Angr you need to specify some information for it to work:</p>

<ul>
  <li>Load the binary and create a project</li>
  <li>Start from somewhere in the memory that will be your entry state</li>
  <li>Create a angr simulation (that will analyse the paths)</li>
  <li>Tell it which memory space you want to end up with (the one with the success)</li>
</ul>

<p>So that the easy part, because then you can add a tones of stuff depending on how hard is your binary (memory jumps, unconstrained, dynamic).
And angr provides tools for that.
In ours, itâ€™s pretty basic, we know that the solution is in the register <code class="language-plaintext highlighter-rouge">rbp-0x200</code> so:</p>

<ul>
  <li>We take the solution state at <code class="language-plaintext highlighter-rouge">0x400C5C</code> found by angr</li>
  <li>Take the pointer to <code class="language-plaintext highlighter-rouge">rbp-0x200</code> (the syntax is weird, but works)</li>
  <li>Then we load 16bits of that particular registry from the solution state a bit vector</li>
  <li>Finally we evaluate using the solution state the bit vector into bytes to give us the flag.</li>
</ul>

<h4 id="write-the-script">Write the script</h4>

<p>Which leads to this python script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">angr</span>

<span class="n">project</span> <span class="o">=</span> <span class="n">angr</span><span class="p">.</span><span class="n">Project</span><span class="p">(</span><span class="s">"./serial"</span><span class="p">)</span>
<span class="n">state</span> <span class="o">=</span> <span class="n">project</span><span class="p">.</span><span class="n">factory</span><span class="p">.</span><span class="n">blank_state</span><span class="p">(</span><span class="n">addr</span><span class="o">=</span><span class="mh">0x400A3C</span><span class="p">)</span>

<span class="n">simulation</span> <span class="o">=</span> <span class="n">project</span><span class="p">.</span><span class="n">factory</span><span class="p">.</span><span class="n">simgr</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
<span class="n">simulation</span><span class="p">.</span><span class="n">explore</span><span class="p">(</span><span class="n">find</span><span class="o">=</span><span class="mh">0x400C5C</span><span class="p">)</span>

<span class="n">solution_state</span> <span class="o">=</span> <span class="n">simulation</span><span class="p">.</span><span class="n">found</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">pointer</span> <span class="o">=</span> <span class="n">solution_state</span><span class="p">.</span><span class="n">regs</span><span class="p">.</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x200</span>
<span class="n">state_bit_vector</span> <span class="o">=</span> <span class="n">solution_state</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">pointer</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">solution_state</span><span class="p">.</span><span class="n">solver</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="n">state_bit_vector</span><span class="p">,</span> <span class="n">cast_to</span><span class="o">=</span><span class="nb">bytes</span><span class="p">))</span>
</code></pre></div></div>

<p>This will print the value of the bit vector of size 16 at the registry <em>rbp-0x200</em> 
when we are at the valid serial number state:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sa">b</span><span class="s">'EZ9dmq4c8g9G7bAV'</span>
</code></pre></div></div>

<p>Since it can be random the way angr deals with the constraints, 
you may need to rerun it in order to get it all (you might see some <code class="language-plaintext highlighter-rouge">\x00</code>).</p>

:ET